apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: Name of the secret containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: apikey
      description: field in the secret that contains the api key used to login to ibmcloud container registry
      default: apikey
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: ""
    - name: image-url
      description: |
        url of the image to build
        required if no image pipeline resource provided or no registry region, namespace and image name parameters
        are provided to this task
      default: ""
    - name: registryRegion
      description: container registry region id. required if no image-url or no image pipeline resources provided
      default: ""
    - name: registryNamespace
      description: container registry namespace. required if no image-url or no image pipeline resources provided
      default: ""
    - name: registry-create-namespace
      description: create container registry namespace if it doesn't already exists
      default: "true"
    - name: imageName
      description: image name. required if no image-url or no image pipeline resources provided
      default: "angulist-app"
    - name: path-to-context
      description: the path to the context that is used for the build (default to `.` meaning current directory)
      default: .
    - name: path-to-dockerfile
      description: the path to the Dockerfile that is used for the build (default to `.` meaning current directory)
      default: .
    - name: dockerfile
      description: The name of the Dockerfile
      default: "Dockerfile"
    - name: build-args
      description: build argument list in the format 'KEY=VALUE' with a key-value pair per line.
      default: ""
    - name: buildkit-image
      description: The name of the BuildKit image
      default: "moby/buildkit:v0.8.1"
    - name: push-to-registry
      description: option to push the built image to registry or not. Default is `true`
      default: "true"
    - name: check-step-image
      description: image to use for the check (pre-build) step (default to icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.11)
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.11"
    - name: process-log-step-image
      description: image to use for the process log (post-build) steps (default to icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.11)
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.11"
    - name: additional-tags
      description: comma-separated list of additional-tags
      # can not be defined as an array because of variable substition error for array
      # https://github.com/tektoncd/pipeline/commit/86deacb04536f0f3e7176c6664cec8786678ed18
      default: ""
    - name: additional-tags-script
      description: Shell script that allows to add tags for the image to be build.
      default: ""
    - name: properties-file
      description: file containing properties out of containerize task
      default: build.properties
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"
    - name: deployment-file
      default: deployment.yml
    - name: clusterNamespace
      default: production
    - name: cluster
      description: The IBM Cloud Kubernetes cluster name
    - name: clusterRegion
      description: The IBM Cloud Kubernetes cluster region
  workspaces:
  - name: task-pvc
    mountPath: /artifacts   
  steps:
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: REVISION
          value: $(params.revision)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          cd /workspace && git clone -q -b $REVISION $REPOSITORY .;
    - name: pre-build-check
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      workingDir: /steps
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.registryRegion)
        - name: HOME
          value: "/root"
        - name: REGISTRY_NAMESPACE
          value: $(params.registryNamespace)
        - name: IMAGE_NAME
          value: $(params.imageName)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh";
          cd /workspace && source .tekton/scripts/pre-build-check.sh;
    - name: build-docker-image
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.registryRegion)
        - name: HOME
          value: "/root"
        - name: REGISTRY_NAMESPACE
          value: $(params.registryNamespace)
        - name: IMAGE_NAME
          value: $(params.imageName)
        - name: ARCHIVE_DIR
          value: "/artifacts"
        - name: BUILD_NUMBER
          value: "0"
        - name: GIT_BRANCH
          value: $(params.revision)
        # specifying DOCKER_CONFIG is required to allow buildkit to detect docker credentials
        - name: DOCKER_CONFIG
          value: /steps
        # CD execution context injection
        - name: PIPELINE_RUN_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
        - name: PIPELINE_RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: TRIGGER_TYPE
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-type']
        - name: TRIGGER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
        - name: TRIGGERED_BY
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
        - name: WORKSPACE_PATH
          value: $(workspaces.source.path)
      securityContext:
        privileged: true
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh";
          export GIT_COMMIT=$(git rev-parse HEAD);
          export REGISTRY_URL=$(ibmcloud cr info | sed "2q;d" | awk '{for(i=1;i<=NF;i++) if ($i=="Registry") print $(i+1)}');
          cd /workspace && source .tekton/scripts/build-docker-image.sh;
      volumeMounts:
        - mountPath: /steps
          name: steps-volume
  sidecars:
    - image: "moby/buildkit:v0.8.1"
      name: server
      securityContext:
        privileged: true
        # Use a workaround to by pass virtio-fs for Continuous Delivery shared workers
      command: ["sh", "-c"]
      args:
        - if [[ $(df -PT /var/lib/buildkit | awk 'NR==2 {print $2}') == virtiofs ]]; then
           apk add e2fsprogs &&
           truncate -s 20G /tmp/disk.img &&
           mkfs.ext4 /tmp/disk.img &&
           mount /tmp/disk.img /var/lib/buildkit; fi && buildkitd --addr tcp://0.0.0.0:1234;
      # Wait for the buildkit daemon to have available workers.
  volumes:
    - name: steps-volume
      emptyDir: {}
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: validate-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: apikey
      description: the ibmcloud api key
    - name: api
      description: the ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: registryRegion
      description: the ibmcloud registry region   
  workspaces:
  - name: task-pvc
    mountPath: /artifacts         
  steps:
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: REVISION
          value: $(params.revision)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          cd /workspace && git clone -q -b $REVISION $REPOSITORY .;
    - name: check-vulnerabilities
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: HOME
          value: "/root"
        - name: REGION
          value: $(params.registryRegion)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          while read line; do export $line; done < /artifacts/build.properties;
          cp /artifacts/build.properties .;
          cd /workspace && source .tekton/scripts/check-vulnerabilities.sh || true;
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: apikey
      description: the ibmcloud api key
    - name: api
      description: the ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: deployment-file
      default: deployment.yml
    - name: clusterNamespace
      default: production
    - name: cluster
      description: The IBM Cloud Kubernetes cluster name
    - name: clusterRegion
      description: The IBM Cloud Kubernetes cluster region
  workspaces:
  - name: task-pvc
    mountPath: /artifacts  
  steps:
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: REVISION
          value: $(params.revision)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          cd /workspace && git clone -q -b $REVISION $REPOSITORY .;
    - name: pre-deploy-check
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.clusterRegion)
        - name: HOME
          value: "/root"
        - name: DEPLOYMENT_FILE
          value: $(params.deployment-file)
        - name: CLUSTER_NAMESPACE
          value: $(params.clusterNamespace)
        - name: PIPELINE_KUBERNETES_CLUSTER_NAME
          value: $(params.cluster)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          cd /workspace;
          export IKS_BETA_VERSION=1;
          ibmcloud ks cluster config -c "${PIPELINE_KUBERNETES_CLUSTER_NAME}";
          if which oc > /dev/null && ibmcloud ks cluster get -c "${PIPELINE_KUBERNETES_CLUSTER_NAME}" --json | jq -e '.type=="openshift"' > /dev/null; then oc login -u apikey -p "${IBMCLOUD_API_KEY}" ; fi;
          while read line; do export $line; done < /artifacts/build.properties;
          cp /artifacts/build.properties .;
          cd /workspace && source .tekton/scripts/pre-deploy-check.sh;
    - name: deploy-to-kubernetes
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.clusterRegion)
        - name: HOME
          value: "/root"
        - name: DEPLOYMENT_FILE
          value: $(params.deployment-file)
        - name: CLUSTER_NAMESPACE
          value: $(params.clusterNamespace)
        - name: PIPELINE_KUBERNETES_CLUSTER_NAME
          value: $(params.cluster)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          export IKS_BETA_VERSION=1;
          ibmcloud ks cluster config -c "${PIPELINE_KUBERNETES_CLUSTER_NAME}";
          if which oc > /dev/null && ibmcloud ks cluster get -c "${PIPELINE_KUBERNETES_CLUSTER_NAME}" --json | jq -e '.type=="openshift"' > /dev/null; then oc login -u apikey -p "${IBMCLOUD_API_KEY}" ; fi;
          while read line; do export $line; done < /artifacts/build.properties;
          cp /artifacts/build.properties .;
          cd /workspace && source .tekton/scripts/deploy-to-kubernetes.sh;
      
