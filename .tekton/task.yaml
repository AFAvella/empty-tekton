apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: apikey
      description: the ibmcloud api key
    - name: api
      description: the ibmcloud api endpoint
      default: https://cloud.ibm.com
    - name: registryNamespace
      description: the ibmcloud registry namespace
    - name: imageName
      description: the base image name
      default: "angulist-app"
    - name: registryRegion
      description: the ibmcloud registry region
    - name: buildkit-image
      description: The name of the BuildKit image
      default: "moby/buildkit:v0.8.1"
    - name: path-to-context
      description: the path to the context that is used for the build (default to `.` meaning current directory)
      default: .
    - name: path-to-dockerfile
      description: the path to the Dockerfile that is used for the build (default to `.` meaning current directory)
      default: .
    - name: push-to-registry
      description: option to push the built ima<sge to registry or not. Default is `true`
      default: "true"
  workspaces:
  - name: task-pvc
    mountPath: /artifacts   
  steps:
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: REVISION
          value: $(params.revision)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          cd /workspace && git clone -q -b $REVISION $REPOSITORY .;
    - name: pre-build-check
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      workingDir: /steps
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.registryRegion)
        - name: HOME
          value: "/root"
        - name: REGISTRY_NAMESPACE
          value: $(params.registryNamespace)
        - name: IMAGE_NAME
          value: $(params.imageName)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh";
          cd /workspace && source .tekton/scripts/pre-build-check.sh;
    - name: build-docker-image
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.registryRegion)
        - name: HOME
          value: "/root"
        - name: REGISTRY_NAMESPACE
          value: $(params.registryNamespace)
        - name: IMAGE_NAME
          value: $(params.imageName)
        - name: ARCHIVE_DIR
          value: "/artifacts"
        - name: BUILD_NUMBER
          value: "0"
        - name: GIT_BRANCH
          value: $(params.revision)
        # specifying DOCKER_CONFIG is required to allow buildkit to detect docker credentials
        - name: DOCKER_CONFIG
          value: /steps
        # CD execution context injection
        - name: PIPELINE_RUN_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
        - name: PIPELINE_RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: TRIGGER_TYPE
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-type']
        - name: TRIGGER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
        - name: TRIGGERED_BY
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
        - name: WORKSPACE_PATH
          value: $(workspaces.source.path)
      securityContext:
        privileged: true
      command: ["/bin/bash", "-c"]
      args:
        - |
          # Input env variables (can be received via a pipeline environment properties.file.
          echo "REGISTRY_URL=${REGISTRY_URL}"
          echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}"
          echo "IMAGE_NAME=${IMAGE_NAME}"
          echo "BUILD_NUMBER=${BUILD_NUMBER}"
          echo "ARCHIVE_DIR=${ARCHIVE_DIR}"
          echo "GIT_BRANCH=${GIT_BRANCH}"
          echo "GIT_COMMIT=${GIT_COMMIT}"
          echo "DOCKER_ROOT=${DOCKER_ROOT}"
          echo "DOCKER_FILE=${DOCKER_FILE}"

          # View build properties
          if [ -f build.properties ]; then 
            echo "build.properties:"
            cat build.properties | grep -v -i password
          else 
            echo "build.properties : not found"
          fi 
          # also run 'env' command to find all available env variables
          # or learn more about the available environment variables at:
          # https://cloud.ibm.com/docs/services/ContinuousDelivery/pipeline_deploy_var.html#deliverypipeline_environment

          # To review or change build options use:
          # ibmcloud cr build --help

          # Minting image tag using format: BUILD_NUMBER-BRANCH-COMMIT_ID-TIMESTAMP
          # e.g. 3-master-50da6912-20181123114435
          # (use build number as first segment to allow image tag as a patch release name according to semantic versioning)
          TIMESTAMP=$( date -u "+%Y%m%d%H%M%S")
          IMAGE_TAG=${TIMESTAMP}
          if [ ! -z "${GIT_COMMIT}" ]; then
            GIT_COMMIT_SHORT=$( echo ${GIT_COMMIT} | head -c 8 ) 
            IMAGE_TAG=${GIT_COMMIT_SHORT}-${IMAGE_TAG}
          fi
          if [ ! -z "${GIT_BRANCH}" ]; then IMAGE_TAG=${GIT_BRANCH}-${IMAGE_TAG} ; fi
          IMAGE_TAG=${BUILD_NUMBER}-${IMAGE_TAG}

          # Checking ig buildctl is installed
          if which buildctl > /dev/null 2>&1; then
            buildctl --version
          else 
            echo "Installing Buildkit builctl"
            curl -sL https://github.com/moby/buildkit/releases/download/v0.8.1/buildkit-v0.8.1.linux-amd64.tar.gz | tar -C /tmp -xz bin/buildctl && mv /tmp/bin/buildctl /usr/bin/buildctl && rmdir --ignore-fail-on-non-empty /tmp/bin
            buildctl --version
          fi

          # Create the config.json file to make private container registry accessible
          export DOCKER_CONFIG=$(mktemp -d -t cr-config-XXXXXXXXXX)
          kubectl create secret --dry-run=true --output=json \
            docker-registry registry-dockerconfig-secret \
            --docker-server=us.io.cr \
            --docker-password=${IBMCLOUD_API_KEY} \
            --docker-username=iamapikey --docker-email=favella@ibm.com | \
          jq -r '.data[".dockerconfigjson"]' | base64 -d > ${DOCKER_CONFIG}/config.json

          echo "=========================================================="
          echo -e "BUILDING CONTAINER IMAGE: ${IMAGE_NAME}:${IMAGE_TAG}"
          if [ -z "${DOCKER_ROOT}" ]; then DOCKER_ROOT=. ; fi
          if [ -z "${DOCKER_FILE}" ]; then DOCKER_FILE=Dockerfile ; fi
          if [ -z "$EXTRA_BUILD_ARGS" ]; then
            echo -e ""
          else
            for buildArg in $EXTRA_BUILD_ARGS; do
              if [ "$buildArg" == "--build-arg" ]; then
                echo -e ""
              else      
                BUILD_ARGS="${BUILD_ARGS} --opt build-arg:$buildArg"
              fi
            done
          fi
          BUILDKIT_IMAGE_NAMES=$(tr -s '\r\n' ',' < /steps/tags.lst | sed -e 's/,$/\n/')
          if [ -z "$BUILDKIT_IMAGE_NAMES" ]; then
          # Set default image name for buildkit to push
            BUILDKIT_IMAGE_NAMES="$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME"
          fi
          echo "Buildkit Image names: $BUILDKIT_IMAGE_NAMES"

          BUILD_ARG_LIST=''
          for buildArg in $BUILD_ARG_LIST; do
            BUILD_ARGS="${BUILD_ARGS} --opt build-arg:$buildArg "
          done
          set -x
          buildctl --addr tcp://localhost:1234 build \
            --progress=plain \
            --frontend=dockerfile.v0 \
            --opt filename=Dockerfile \
            ${BUILD_ARGS} \
            --local context=/artifacts/. \
            --local dockerfile= ./Dockerfile \
            #--exporter=image --exporter-opt "name=$BUILDKIT_IMAGE_NAMES" --exporter-opt "push=true" \
            --output type=image,"name=us.icr.io/tekton-handson/angulist-app:1.0.0",push=true \
            #--output type=image,name=$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:tag1,name=username/image:tag2,push=true
            --export-cache type=inline \
            --import-cache type=registry,ref=$IMAGE_REPOSITORY 2>&1 | tee /steps/build.log
          set +x

          ibmcloud cr image-inspect ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}

          # Set PIPELINE_IMAGE_URL for subsequent jobs in stage (e.g. Vulnerability Advisor)
          export PIPELINE_IMAGE_URL="$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$IMAGE_TAG"

          ibmcloud cr images --restrict ${REGISTRY_NAMESPACE}/${IMAGE_NAME}

          ######################################################################################
          # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
          ######################################################################################
          echo "=========================================================="
          echo "COPYING ARTIFACTS needed for deployment and testing (in particular build.properties)"

          echo "Checking archive dir presence"
          if [ -z "${ARCHIVE_DIR}" ]; then
            echo -e "Build archive directory contains entire working directory."
          else
            echo -e "Copying working dir into build archive directory: ${ARCHIVE_DIR} "
            mkdir -p ${ARCHIVE_DIR}
            find . -mindepth 1 -maxdepth 1 -not -path "./$ARCHIVE_DIR" -exec cp -R '{}' "${ARCHIVE_DIR}/" ';'
          fi

          # Persist env variables into a properties file (build.properties) so that all pipeline stages consuming this
          # build as input and configured with an environment properties file valued 'build.properties'
          # will be able to reuse the env variables in their job shell scripts.

          # If already defined build.properties from prior build job, append to it.
          cp build.properties $ARCHIVE_DIR/ || :

          # IMAGE information from build.properties is used in Helm Chart deployment to set the release name
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $ARCHIVE_DIR/build.properties
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $ARCHIVE_DIR/build.properties
          # REGISTRY information from build.properties is used in Helm Chart deployment to generate cluster secret
          echo "REGISTRY_URL=${REGISTRY_URL}" >> $ARCHIVE_DIR/build.properties
          echo "REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}" >> $ARCHIVE_DIR/build.properties
          echo "GIT_BRANCH=${GIT_BRANCH}" >> $ARCHIVE_DIR/build.properties
          echo "File 'build.properties' created for passing env variables to subsequent pipeline jobs:"
          cat $ARCHIVE_DIR/build.properties | grep -v -i password;
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh";
          export GIT_COMMIT=$(git rev-parse HEAD);
          export REGISTRY_URL=$(ibmcloud cr info | sed "2q;d" | awk '{for(i=1;i<=NF;i++) if ($i=="Registry") print $(i+1)}');
          cd /workspace && source .tekton/scripts/build-docker-image.sh;
      volumeMounts:
        - mountPath: /steps
          name: steps-volume
  sidecars:
    - image: "moby/buildkit:v0.8.1"
      name: server
      securityContext:
        privileged: true
        # Use a workaround to by pass virtio-fs for Continuous Delivery shared workers
      command: ["sh", "-c"]
      args:
        - if [[ $(df -PT /var/lib/buildkit | awk 'NR==2 {print $2}') == virtiofs ]]; then
           apk add e2fsprogs &&
           truncate -s 20G /tmp/disk.img &&
           mkfs.ext4 /tmp/disk.img &&
           mount /tmp/disk.img /var/lib/buildkit; fi && buildkitd --addr tcp://localhost:1234;
      # Wait for the buildkit daemon to have available workers.
  volumes:
    - name: steps-volume
      emptyDir: {}
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: validate-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: apikey
      description: the ibmcloud api key
    - name: api
      description: the ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: registryRegion
      description: the ibmcloud registry region   
  workspaces:
  - name: task-pvc
    mountPath: /artifacts         
  steps:
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: REVISION
          value: $(params.revision)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          cd /workspace && git clone -q -b $REVISION $REPOSITORY .;
    - name: check-vulnerabilities
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: HOME
          value: "/root"
        - name: REGION
          value: $(params.registryRegion)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          if [ -f /artifacts/build.properties ]; then
            while read line; do export $line; done < /artifacts/build.properties;
            cp /artifacts/build.properties .;
          fi;
          cd /workspace && source .tekton/scripts/check-vulnerabilities.sh || true;
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: apikey
      description: the ibmcloud api key
    - name: api
      description: the ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: deployment-file
      default: deployment.yml
    - name: clusterNamespace
      default: production
    - name: cluster
      description: The IBM Cloud Kubernetes cluster name
    - name: clusterRegion
      description: The IBM Cloud Kubernetes cluster region
  workspaces:
  - name: task-pvc
    mountPath: /artifacts  
  steps:
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: REVISION
          value: $(params.revision)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          cd /workspace && git clone -q -b $REVISION $REPOSITORY .;
    - name: pre-deploy-check
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.clusterRegion)
        - name: HOME
          value: "/root"
        - name: DEPLOYMENT_FILE
          value: $(params.deployment-file)
        - name: CLUSTER_NAMESPACE
          value: $(params.clusterNamespace)
        - name: PIPELINE_KUBERNETES_CLUSTER_NAME
          value: $(params.cluster)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          cd /workspace;
          export IKS_BETA_VERSION=1;
          ibmcloud ks cluster config -c "${PIPELINE_KUBERNETES_CLUSTER_NAME}";
          if which oc > /dev/null && ibmcloud ks cluster get -c "${PIPELINE_KUBERNETES_CLUSTER_NAME}" --json | jq -e '.type=="openshift"' > /dev/null; then oc login -u apikey -p "${IBMCLOUD_API_KEY}" ; fi;
          if [ -f /artifacts/build.properties ]; then
            while read line; do export $line; done < /artifacts/build.properties;
            cp /artifacts/build.properties .;
          fi;
          cd /workspace && source .tekton/scripts/pre-deploy-check.sh;
    - name: deploy-to-kubernetes
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.clusterRegion)
        - name: HOME
          value: "/root"
        - name: DEPLOYMENT_FILE
          value: $(params.deployment-file)
        - name: CLUSTER_NAMESPACE
          value: $(params.clusterNamespace)
        - name: PIPELINE_KUBERNETES_CLUSTER_NAME
          value: $(params.cluster)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          export IKS_BETA_VERSION=1;
          ibmcloud ks cluster config -c "${PIPELINE_KUBERNETES_CLUSTER_NAME}";
          if which oc > /dev/null && ibmcloud ks cluster get -c "${PIPELINE_KUBERNETES_CLUSTER_NAME}" --json | jq -e '.type=="openshift"' > /dev/null; then oc login -u apikey -p "${IBMCLOUD_API_KEY}" ; fi;
          if [ -f /artifacts/build.properties ]; then
            while read line; do export $line; done < /artifacts/build.properties;
            cp /artifacts/build.properties .;
          fi;
          cd /workspace && source .tekton/scripts/deploy-to-kubernetes.sh;
      
